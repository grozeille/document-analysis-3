/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package fr.grozeille.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ParsedDocument extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8363816615196621377L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ParsedDocument\",\"namespace\":\"org.grozeille.avro\",\"fields\":[{\"name\":\"path\",\"type\":\"string\"},{\"name\":\"md5\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"extension\",\"type\":\"string\"},{\"name\":\"lang\",\"type\":\"string\"},{\"name\":\"body\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ParsedDocument> ENCODER =
      new BinaryMessageEncoder<ParsedDocument>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ParsedDocument> DECODER =
      new BinaryMessageDecoder<ParsedDocument>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ParsedDocument> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ParsedDocument> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ParsedDocument>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ParsedDocument to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ParsedDocument from a ByteBuffer. */
  public static ParsedDocument fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence path;
  @Deprecated public java.lang.CharSequence md5;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence extension;
  @Deprecated public java.lang.CharSequence lang;
  @Deprecated public java.lang.CharSequence body;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ParsedDocument() {}

  /**
   * All-args constructor.
   * @param path The new value for path
   * @param md5 The new value for md5
   * @param name The new value for name
   * @param extension The new value for extension
   * @param lang The new value for lang
   * @param body The new value for body
   */
  public ParsedDocument(java.lang.CharSequence path, java.lang.CharSequence md5, java.lang.CharSequence name, java.lang.CharSequence extension, java.lang.CharSequence lang, java.lang.CharSequence body) {
    this.path = path;
    this.md5 = md5;
    this.name = name;
    this.extension = extension;
    this.lang = lang;
    this.body = body;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return path;
    case 1: return md5;
    case 2: return name;
    case 3: return extension;
    case 4: return lang;
    case 5: return body;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: path = (java.lang.CharSequence)value$; break;
    case 1: md5 = (java.lang.CharSequence)value$; break;
    case 2: name = (java.lang.CharSequence)value$; break;
    case 3: extension = (java.lang.CharSequence)value$; break;
    case 4: lang = (java.lang.CharSequence)value$; break;
    case 5: body = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'path' field.
   * @return The value of the 'path' field.
   */
  public java.lang.CharSequence getPath() {
    return path;
  }

  /**
   * Sets the value of the 'path' field.
   * @param value the value to set.
   */
  public void setPath(java.lang.CharSequence value) {
    this.path = value;
  }

  /**
   * Gets the value of the 'md5' field.
   * @return The value of the 'md5' field.
   */
  public java.lang.CharSequence getMd5() {
    return md5;
  }

  /**
   * Sets the value of the 'md5' field.
   * @param value the value to set.
   */
  public void setMd5(java.lang.CharSequence value) {
    this.md5 = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'extension' field.
   * @return The value of the 'extension' field.
   */
  public java.lang.CharSequence getExtension() {
    return extension;
  }

  /**
   * Sets the value of the 'extension' field.
   * @param value the value to set.
   */
  public void setExtension(java.lang.CharSequence value) {
    this.extension = value;
  }

  /**
   * Gets the value of the 'lang' field.
   * @return The value of the 'lang' field.
   */
  public java.lang.CharSequence getLang() {
    return lang;
  }

  /**
   * Sets the value of the 'lang' field.
   * @param value the value to set.
   */
  public void setLang(java.lang.CharSequence value) {
    this.lang = value;
  }

  /**
   * Gets the value of the 'body' field.
   * @return The value of the 'body' field.
   */
  public java.lang.CharSequence getBody() {
    return body;
  }

  /**
   * Sets the value of the 'body' field.
   * @param value the value to set.
   */
  public void setBody(java.lang.CharSequence value) {
    this.body = value;
  }

  /**
   * Creates a new ParsedDocument RecordBuilder.
   * @return A new ParsedDocument RecordBuilder
   */
  public static ParsedDocument.Builder newBuilder() {
    return new ParsedDocument.Builder();
  }

  /**
   * Creates a new ParsedDocument RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ParsedDocument RecordBuilder
   */
  public static ParsedDocument.Builder newBuilder(ParsedDocument.Builder other) {
    return new ParsedDocument.Builder(other);
  }

  /**
   * Creates a new ParsedDocument RecordBuilder by copying an existing ParsedDocument instance.
   * @param other The existing instance to copy.
   * @return A new ParsedDocument RecordBuilder
   */
  public static ParsedDocument.Builder newBuilder(ParsedDocument other) {
    return new ParsedDocument.Builder(other);
  }

  /**
   * RecordBuilder for ParsedDocument instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ParsedDocument>
    implements org.apache.avro.data.RecordBuilder<ParsedDocument> {

    private java.lang.CharSequence path;
    private java.lang.CharSequence md5;
    private java.lang.CharSequence name;
    private java.lang.CharSequence extension;
    private java.lang.CharSequence lang;
    private java.lang.CharSequence body;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ParsedDocument.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.path)) {
        this.path = data().deepCopy(fields()[0].schema(), other.path);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.md5)) {
        this.md5 = data().deepCopy(fields()[1].schema(), other.md5);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.extension)) {
        this.extension = data().deepCopy(fields()[3].schema(), other.extension);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.lang)) {
        this.lang = data().deepCopy(fields()[4].schema(), other.lang);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.body)) {
        this.body = data().deepCopy(fields()[5].schema(), other.body);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ParsedDocument instance
     * @param other The existing instance to copy.
     */
    private Builder(ParsedDocument other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.path)) {
        this.path = data().deepCopy(fields()[0].schema(), other.path);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.md5)) {
        this.md5 = data().deepCopy(fields()[1].schema(), other.md5);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.extension)) {
        this.extension = data().deepCopy(fields()[3].schema(), other.extension);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.lang)) {
        this.lang = data().deepCopy(fields()[4].schema(), other.lang);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.body)) {
        this.body = data().deepCopy(fields()[5].schema(), other.body);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'path' field.
      * @return The value.
      */
    public java.lang.CharSequence getPath() {
      return path;
    }

    /**
      * Sets the value of the 'path' field.
      * @param value The value of 'path'.
      * @return This builder.
      */
    public ParsedDocument.Builder setPath(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.path = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'path' field has been set.
      * @return True if the 'path' field has been set, false otherwise.
      */
    public boolean hasPath() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'path' field.
      * @return This builder.
      */
    public ParsedDocument.Builder clearPath() {
      path = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'md5' field.
      * @return The value.
      */
    public java.lang.CharSequence getMd5() {
      return md5;
    }

    /**
      * Sets the value of the 'md5' field.
      * @param value The value of 'md5'.
      * @return This builder.
      */
    public ParsedDocument.Builder setMd5(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.md5 = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'md5' field has been set.
      * @return True if the 'md5' field has been set, false otherwise.
      */
    public boolean hasMd5() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'md5' field.
      * @return This builder.
      */
    public ParsedDocument.Builder clearMd5() {
      md5 = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public ParsedDocument.Builder setName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public ParsedDocument.Builder clearName() {
      name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'extension' field.
      * @return The value.
      */
    public java.lang.CharSequence getExtension() {
      return extension;
    }

    /**
      * Sets the value of the 'extension' field.
      * @param value The value of 'extension'.
      * @return This builder.
      */
    public ParsedDocument.Builder setExtension(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.extension = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'extension' field has been set.
      * @return True if the 'extension' field has been set, false otherwise.
      */
    public boolean hasExtension() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'extension' field.
      * @return This builder.
      */
    public ParsedDocument.Builder clearExtension() {
      extension = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'lang' field.
      * @return The value.
      */
    public java.lang.CharSequence getLang() {
      return lang;
    }

    /**
      * Sets the value of the 'lang' field.
      * @param value The value of 'lang'.
      * @return This builder.
      */
    public ParsedDocument.Builder setLang(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.lang = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'lang' field has been set.
      * @return True if the 'lang' field has been set, false otherwise.
      */
    public boolean hasLang() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'lang' field.
      * @return This builder.
      */
    public ParsedDocument.Builder clearLang() {
      lang = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'body' field.
      * @return The value.
      */
    public java.lang.CharSequence getBody() {
      return body;
    }

    /**
      * Sets the value of the 'body' field.
      * @param value The value of 'body'.
      * @return This builder.
      */
    public ParsedDocument.Builder setBody(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.body = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'body' field has been set.
      * @return True if the 'body' field has been set, false otherwise.
      */
    public boolean hasBody() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'body' field.
      * @return This builder.
      */
    public ParsedDocument.Builder clearBody() {
      body = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ParsedDocument build() {
      try {
        ParsedDocument record = new ParsedDocument();
        record.path = fieldSetFlags()[0] ? this.path : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.md5 = fieldSetFlags()[1] ? this.md5 : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.name = fieldSetFlags()[2] ? this.name : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.extension = fieldSetFlags()[3] ? this.extension : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.lang = fieldSetFlags()[4] ? this.lang : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.body = fieldSetFlags()[5] ? this.body : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ParsedDocument>
    WRITER$ = (org.apache.avro.io.DatumWriter<ParsedDocument>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ParsedDocument>
    READER$ = (org.apache.avro.io.DatumReader<ParsedDocument>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
